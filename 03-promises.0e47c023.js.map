{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEaC,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAACC,GAC/BA,EAAIC,iBAEJ,IAAgCC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBG,MAAOC,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAEfC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,OAEhCG,EAAc,EAEdC,EAAaC,aAAY,YAC5BF,GAAe,KACID,GACjBI,cAAcF,GAUjB,SAAuBG,EAAUZ,GAE/B,IAAMa,EAAgBC,KAAKC,SAAW,GACtB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACJI,EAAQ,uBAAwCG,OAAfR,EAAS,QAAYQ,OAANpB,EAAM,OAEpDkB,EAAK,sBAAqCE,OAAfR,EAAS,QAAYQ,OAANpB,EAAM,M,GAGjDA,E,IAIFqB,MAAM,SAAAC,G,OAAUhC,EAAAiC,OAAOC,QAAQF,E,IAC/BG,OAAM,SAAAH,G,OAAWhC,EAAAiC,OAAOG,QAAQJ,E,IAxBnCK,CAAcpB,EAAaJ,E,GAC1BG,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', (evt) => {\n  evt.preventDefault();\n  \n  const { delay, step, amount } = evt.currentTarget.elements;\n  \n  const delayValue = Number(delay.value);\n  const stepValue = Number(step.value);\n  const amountValue = Number(amount.value);\n\nlet innerAmound = 0;\n\nlet intervalId = setInterval(()=>{\n innerAmound += 1;\n if(innerAmound === amountValue){\n   clearInterval(intervalId);\n }\n  createPromise(amountValue, delayValue);\n}, stepValue);\n\n})\n\n\n\n\nfunction createPromise(position, delay) {\n  //  console.log(position, delay);\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      } else {\n      reject(`❌ Rejected promise ${position} in ${delay}ms`)\n      }\n      \n    }, delay);\n  })\n\n  promise\n    .then( result => Notify.success(result))\n    .catch(result  => Notify.failure(result))\n \n  }\n\n"],"names":["$h6c0i","parcelRequire","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay","step","amount","delayValue","Number","value","stepValue","amountValue","innerAmound","intervalId","setInterval","clearInterval","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","concat","then","result","Notify","success","catch","failure","$ce04d3a99e08e73b$var$createPromise"],"version":3,"file":"03-promises.0e47c023.js.map"}